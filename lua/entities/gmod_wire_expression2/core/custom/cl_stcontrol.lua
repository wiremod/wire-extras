--[[ ******************************************************************************
 My custom state LQ-PID control type handling process variables
****************************************************************************** ]]--

local DSC, par = E2Helper.Descriptions, {}
local trm = {"proportional", "integral", "derivative"}
local act = {"Returns", "Updates", "Removes", "Checks", "Resets", "Works", "Dumps", "Tunes"}
local dct = {"term", "automated", "control", "process", "state", "sampling", "signal", "value", "reference", "setpoint", "method"}
local xsc = dct[5].." "..dct[3]
par[1] = {dct[6].." time", dct[3].." bias", dct[3].." type"}
par[2] = {trm[1].." "..dct[1].." gain" , trm[2].." "..dct[1].." gain" , trm[3].." "..dct[1].." gain"}
par[3] = {trm[1].." "..dct[1].." power", trm[2].." "..dct[1].." power", trm[3].." "..dct[1].." power"}
par[4] = {"windup lower bound", "windup upper bound"}
par[5] = {dct[4].." passed error", dct[4].." current error", dct[4].." error delta"}
par[6] = {dct[4].." passed time" , dct[4].." current time" , dct[4].." time delta", dct[4].." benchmark time", dct[4].." time ratio"}
DSC["noStControl()"] = act[1].." invalid "..xsc.." object"
DSC["newStControl()"] = act[1].." "..xsc.." object with dynamic "..par[1][1]
DSC["newStControl(n)"] = act[1].." "..xsc.." object with static "..par[1][1]
DSC["sumStControls()"] = act[1].." the used "..xsc.." count"
DSC["maxStControls()"] = act[1].." the upper "..xsc.." count"
DSC["remSelf(xsc:)"] = act[3].." the "..xsc.." from the list"
DSC["getCopy(xsc:)"] = act[1].." "..xsc.." object copy instance"
DSC["setGainP(xsc:n)"] = act[2].." "..xsc.." "..par[2][1]
DSC["setGainI(xsc:n)"] = act[2].." "..xsc.." "..par[2][2]
DSC["setGainD(xsc:n)"] = act[2].." "..xsc.." "..par[2][3]
DSC["setGainPI(xsc:nn)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
DSC["setGainPI(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
DSC["setGainPI(xsc:r)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
DSC["setGainPD(xsc:nn)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
DSC["setGainPD(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
DSC["setGainPD(xsc:r)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
DSC["setGainID(xsc:nn)"] = act[2].." "..xsc.." "..par[2][2].." and "..par[2][3]
DSC["setGainID(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][3].." and "..par[2][3]
DSC["setGainID(xsc:r)"] = act[2].." "..xsc.." "..par[2][2].." and "..par[2][3]
DSC["setGain(xsc:nnn)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["setGain(xsc:v)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["setGain(xsc:r)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["remGainP(xsc:)"] = act[3].." "..xsc.." "..par[2][1]
DSC["remGainI(xsc:)"] = act[3].." "..xsc.." "..par[2][2]
DSC["remGainD(xsc:)"] = act[3].." "..xsc.." "..par[2][3]
DSC["remGainPI(xsc:)"] = act[3].." "..xsc.." "..par[2][1].." and "..par[2][2]
DSC["remGainPD(xsc:)"] = act[3].." "..xsc.." "..par[2][1].." and "..par[2][3]
DSC["remGainID(xsc:)"] = act[3].." "..xsc.." "..par[2][2].." and "..par[2][3]
DSC["remGain(xsc:)"] = act[3].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["getGain(xsc:)"] = act[1].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["getGainPI(xsc:)"] = act[1].." "..xsc.." "..par[2][1].." and "..par[2][2]
DSC["getGainPD(xsc:)"] = act[1].." "..xsc.." "..par[2][1].." and "..par[2][3]
DSC["getGainID(xsc:)"] = act[1].." "..xsc.." "..par[2][2].." and "..par[2][3]
DSC["getGainP(xsc:)"] = act[1].." "..xsc.." "..par[2][1]
DSC["getGainI(xsc:)"] = act[1].." "..xsc.." "..par[2][2]
DSC["getGainD(xsc:)"] = act[1].." "..xsc.." "..par[2][3]
DSC["setBias(xsc:n)"] = act[2].." "..xsc.." "..par[1][2]
DSC["getBias(xsc:)"] = act[1].." "..xsc.." "..par[1][2]
DSC["getType(xsc:)"] = act[1].." "..xsc.." "..par[1][3]
DSC["setWindup(xsc:nn)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
DSC["setWindup(xsc:r)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
DSC["setWindup(xsc:xv2)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
DSC["setWindupD(xsc:n)"] = act[2].." "..xsc.." "..par[4][1]
DSC["setWindupU(xsc:n)"] = act[2].." "..xsc.." "..par[4][2]
DSC["remWindup(xsc:)"] = act[3].." "..xsc.." "..par[4][1].." and "..par[4][2]
DSC["remWindupD(xsc:)"] = act[3].." "..xsc.." "..par[4][1]
DSC["remWindupU(xsc:)"] = act[3].." "..xsc.." "..par[4][2]
DSC["getWindup(xsc:)"] = act[1].." "..xsc.." "..par[4][1].." and "..par[4][2]
DSC["getWindupD(xsc:)"] = act[1].." "..xsc.." "..par[4][1]
DSC["getWindupU(xsc:)"] = act[1].." "..xsc.." "..par[4][2]
DSC["setPowerP(xsc:n)"] = act[2].." "..xsc.." "..par[3][1]
DSC["setPowerI(xsc:n)"] = act[2].." "..xsc.." "..par[3][2]
DSC["setPowerD(xsc:n)"] = act[2].." "..xsc.." "..par[3][3]
DSC["setPowerPI(xsc:nn)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPI(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPI(xsc:r)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPD(xsc:nn)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
DSC["setPowerPD(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
DSC["setPowerPD(xsc:r)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
DSC["setPowerID(xsc:nn)"] = act[2].." "..xsc.." "..par[3][2].." and "..par[3][3]
DSC["setPowerID(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][3].." and "..par[3][3]
DSC["setPowerID(xsc:r)"] = act[2].." "..xsc.." "..par[3][2].." and "..par[3][3]
DSC["setPower(xsc:nnn)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["setPower(xsc:v)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["setPower(xsc:r)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["getPower(xsc:)"] = act[1].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["getPowerPI(xsc:)"] = act[1].." "..xsc.." "..par[3][1].." and "..par[3][2]
DSC["getPowerPD(xsc:)"] = act[1].." "..xsc.." "..par[3][1].." and "..par[3][3]
DSC["getPowerID(xsc:)"] = act[1].." "..xsc.." "..par[3][2].." and "..par[3][3]
DSC["getPowerP(xsc:)"] = act[1].." "..xsc.." "..par[3][1]
DSC["getPowerI(xsc:)"] = act[1].." "..xsc.." "..par[3][2]
DSC["getPowerD(xsc:)"] = act[1].." "..xsc.." "..par[3][3]
DSC["getErrorNow(xsc:)"] = act[1].." "..xsc.." "..par[5][2]
DSC["getErrorOld(xsc:)"] = act[1].." "..xsc.." "..par[5][1]
DSC["getErrorDelta(xsc:)"] = act[1].." "..xsc.." "..par[5][3]
DSC["getTimeNow(xsc:)"] = act[1].." "..xsc.." "..par[6][2]
DSC["getTimeOld(xsc:)"] = act[1].." "..xsc.." "..par[6][1]
DSC["getTimeDelta(xsc:)"] = act[1].." "..xsc.." dymamic "..par[6][3]
DSC["getTimeSample(xsc:)"] = act[1].." "..xsc.." static "..par[6][3]
DSC["setTimeSample(xsc:n)"] = act[2].." "..xsc.." static "..par[6][3]
DSC["remTimeSample(xsc:)"] = act[3].." "..xsc.." static "..par[6][3]
DSC["getTimeBench(xsc:)"] = act[1].." "..xsc.." "..par[6][4]
DSC["getTimeRatio(xsc:)"] = act[1].." "..xsc.." "..par[6][5]
DSC["setIsIntegrating(xsc:n)"] = act[2].." "..trm[2].." enabled flag"
DSC["isIntegrating(xsc:)"] = act[4].." "..trm[2].." enabled flag"
DSC["setIsCombined(xsc:n)"] = act[2].." combined flag spreading "..par[2][1].." across others"
DSC["isCombined(xsc:)"] = act[4].." "..xsc.." combined flag spreading "..par[2][1].." across others"
DSC["setIsManual(xsc:n)"] = act[2].." "..xsc.." manual "..dct[3].." flag"
DSC["isManual(xsc:)"] = act[4].." "..xsc.." manual "..dct[3].." flag"
DSC["setManual(xsc:n)"] = act[2].." "..xsc.." manual "..dct[3].." "..dct[8]
DSC["setIsManual(xsc:n)"] = act[2].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
DSC["getManual(xsc:)"] = act[1].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
DSC["setIsInverted(xsc:n)"] = act[2].." "..xsc.." inverted feedback flag of the "..dct[9].." and "..dct[10]
DSC["isInverted(xsc:)"] = act[4].." "..xsc.." inverted feedback flag of the "..dct[9].." and "..dct[10]
DSC["setIsActive(xsc:n)"] = act[2].." "..xsc.." activated working flag"
DSC["isActive(xsc:)"] = act[4].." "..xsc.." activated working flag"
DSC["getControl(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[7].." "..dct[7]
DSC["getControlTerm(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTerm(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getManual(xsc:)"] = act[1].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
DSC["getControlTermP(xsc:)"] = act[1].." "..xsc.." "..trm[1].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTermI(xsc:)"] = act[1].." "..xsc.." "..trm[2].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTermD(xsc:)"] = act[1].." "..xsc.." "..trm[3].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["resState(xsc:)"] = act[5].." "..xsc.." "..dct[2].." internal parameters"
DSC["setState(xsc:nn)"] = act[6].." "..xsc.." "..dct[2].." internal parameters"
DSC["dumpConsole(xsc:s)"] = act[7].." "..xsc.." internal parameters into the console"
DSC["tuneAH(xsc:nnn)"] = act[8].." the "..xsc.." using the Astrom-Hagglund method (AH)"
DSC["tuneAutoZN(xsc:nn)"] = act[8].." the "..xsc.." using the Ziegler-Nichols auto-oscilation method (ZN)"
DSC["tuneAutoZN(xsc:nns)"] = act[8].." the "..xsc.." using the Ziegler-Nichols auto-oscilation method with overshot option (ZN)"
DSC["tuneIAE(xsc:nnn)"] = act[8].." the "..xsc.." using the integral absolute error method (IAE)"
DSC["tuneISE(xsc:nnn)"] = act[8].." the "..xsc.." using the integral square error method (ISE)"
DSC["tuneITAE(xsc:nnn)"] = act[8].." the "..xsc.." using the integral of time-weighted absolute error method (ITAE)"
DSC["tuneOverCHRLR(xsc:nnn)"] = act[8].." the "..xsc.." using the Chien-Hrones-Reswick method (CHR) load rejection 20% overshot"
DSC["tuneOverCHRSP(xsc:nnn)"] = act[8].." the "..xsc.." using the Chien-Hrones-Reswick method (CHR) set point track 20% overshot"
DSC["tuneProcCC(xsc:nnn)"] = act[8].." the "..xsc.." using the Choen-Coon method (CC)"
DSC["tuneProcCHRLR(xsc:nnn)"] = act[8].." the "..xsc.." using the Chien-Hrones-Reswick method (CHR) load rejection"
DSC["tuneProcCHRSP(xsc:nnn)"] = act[8].." the "..xsc.." using the Chien-Hrones-Reswick method (CHR) set point track"
DSC["tuneProcZN(xsc:nnn)"] = act[8].." the "..xsc.." using the Ziegler-Nichols plant process method (ZN)"
