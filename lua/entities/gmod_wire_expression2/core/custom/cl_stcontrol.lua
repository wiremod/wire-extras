E2Helper.Descriptions["dumpItem(xsc:n)"] = "Dumps state controller to the chat area by number identifier"
E2Helper.Descriptions["dumpItem(xsc:s)"] = "Dumps state controller to the chat area by string identifier"
E2Helper.Descriptions["dumpItem(xsc:sn)"] = "Dumps state controller by number identifier in the specified area by first argument"
E2Helper.Descriptions["dumpItem(xsc:ss)"] = "Dumps state controller by string identifier in the specified area by first argument"
E2Helper.Descriptions["getBias(xsc:)"] = "Returns state controller output signal bias"
E2Helper.Descriptions["getControl(xsc:)"] = "Returns state controller automated control output signal value"
E2Helper.Descriptions["getControlTerm(xsc:)"] = "Returns state controller automated control term signals as vector or array"
E2Helper.Descriptions["getControlTermD(xsc:)"] = "Returns state controller derivative automated control term signal"
E2Helper.Descriptions["getControlTermI(xsc:)"] = "Returns state controller integral automated control term signal"
E2Helper.Descriptions["getControlTermP(xsc:)"] = "Returns state controller proportional automated control term signal"
E2Helper.Descriptions["getCopy(xsc:)"] = "Returns state controller object copy instance"
E2Helper.Descriptions["getCopy(xsc:n)"] = "Returns state controller object copy instance with static sampling time"
E2Helper.Descriptions["getErrorDelta(xsc:)"] = "Returns state controller process error delta"
E2Helper.Descriptions["getErrorNow(xsc:)"] = "Returns state controller process current error"
E2Helper.Descriptions["getErrorPast(xsc:)"] = "Returns state controller process passed error"
E2Helper.Descriptions["getGain(xsc:)"] = "Returns state controller proportional, integral and derivative term gains"
E2Helper.Descriptions["getGainD(xsc:)"] = "Returns state controller derivative term gain"
E2Helper.Descriptions["getGainI(xsc:)"] = "Returns state controller integral term gain"
E2Helper.Descriptions["getGainID(xsc:)"] = "Returns state controller integral and derivative term gain"
E2Helper.Descriptions["getGainP(xsc:)"] = "Returns state controller proportional term gain"
E2Helper.Descriptions["getGainPD(xsc:)"] = "Returns state controller proportional and derivative term gain"
E2Helper.Descriptions["getGainPI(xsc:)"] = "Returns state controller proportional and integral term gain"
E2Helper.Descriptions["getManual(xsc:)"] = "Returns state controller manual control signal value"
E2Helper.Descriptions["getPower(xsc:)"] = "Returns state controller proportional, integral and derivative term power"
E2Helper.Descriptions["getPowerD(xsc:)"] = "Returns state controller derivative term power"
E2Helper.Descriptions["getPowerI(xsc:)"] = "Returns state controller integral term power"
E2Helper.Descriptions["getPowerID(xsc:)"] = "Returns state controller integral and derivative term power"
E2Helper.Descriptions["getPowerP(xsc:)"] = "Returns state controller proportional term power"
E2Helper.Descriptions["getPowerPD(xsc:)"] = "Returns state controller proportional and derivative term power"
E2Helper.Descriptions["getPowerPI(xsc:)"] = "Returns state controller proportional and integral term power"
E2Helper.Descriptions["getTimeBench(xsc:)"] = "Returns state controller dynamic process benchmark time"
E2Helper.Descriptions["getTimeDelta(xsc:)"] = "Returns state controller dynamic process time delta"
E2Helper.Descriptions["getTimeNow(xsc:)"] = "Returns state controller dynamic process current time"
E2Helper.Descriptions["getTimePast(xsc:)"] = "Returns state controller dynamic process passed time"
E2Helper.Descriptions["getTimeRatio(xsc:)"] = "Returns state controller dynamic process time ratio"
E2Helper.Descriptions["getTimeSample(xsc:)"] = "Returns state controller static process time delta"
E2Helper.Descriptions["getType(xsc:)"] = "Returns state controller control type"
E2Helper.Descriptions["getWindup(xsc:)"] = "Returns state controller windup lower and upper bound"
E2Helper.Descriptions["getWindupMax(xsc:)"] = "Returns state controller windup upper bound"
E2Helper.Descriptions["getWindupMin(xsc:)"] = "Returns state controller windup lower bound"
E2Helper.Descriptions["isActive(xsc:)"] = "Checks state controller activated working flag"
E2Helper.Descriptions["isCombined(xsc:)"] = "Checks state controller combined flag spreading proportional term gain across others"
E2Helper.Descriptions["isDerivative(xsc:)"] = "Checks state controller derivative enabled flag"
E2Helper.Descriptions["isIntegral(xsc:)"] = "Checks state controller integral enabled flag"
E2Helper.Descriptions["isInverted(xsc:)"] = "Checks state controller inverted feedback flag of the reference and set-point"
E2Helper.Descriptions["isManual(xsc:)"] = "Checks state controller manual control signal flag"
E2Helper.Descriptions["isZeroCross(xsc:)"] = "Checks state controller integral zero crossing flag"
E2Helper.Descriptions["newStControl()"] = "Creates state controller object with dynamic sampling time"
E2Helper.Descriptions["newStControl(n)"] = "Creates state controller object with static sampling time"
E2Helper.Descriptions["noStControl()"] = "Returns state controller invalid object"
E2Helper.Descriptions["remGain(xsc:)"] = "Removes state controller proportional, integral and derivative term gains"
E2Helper.Descriptions["remGainD(xsc:)"] = "Removes state controller derivative term gain"
E2Helper.Descriptions["remGainI(xsc:)"] = "Removes state controller integral term gain"
E2Helper.Descriptions["remGainID(xsc:)"] = "Removes state controller integral and derivative term gains"
E2Helper.Descriptions["remGainP(xsc:)"] = "Removes state controller proportional term gain"
E2Helper.Descriptions["remGainPD(xsc:)"] = "Removes state controller proportional and derivative term gains"
E2Helper.Descriptions["remGainPI(xsc:)"] = "Removes state controller proportional and integral term gains"
E2Helper.Descriptions["remTimeSample(xsc:)"] = "Removes state controller static process time delta"
E2Helper.Descriptions["remWindup(xsc:)"] = "Removes state controller windup lower and upper bound"
E2Helper.Descriptions["remWindupMax(xsc:)"] = "Removes state controller windup upper bound"
E2Helper.Descriptions["remWindupMin(xsc:)"] = "Removes state controller windup lower bound"
E2Helper.Descriptions["resState(xsc:)"] = "Resets state controller automated internal parameters"
E2Helper.Descriptions["setBias(xsc:n)"] = "Updates state controller output signal bias"
E2Helper.Descriptions["setGain(xsc:nnn)"] = "Updates state controller proportional, integral and derivative term gains"
E2Helper.Descriptions["setGain(xsc:r)"] = "Updates state controller proportional, integral and derivative term gains"
E2Helper.Descriptions["setGain(xsc:v)"] = "Updates state controller proportional, integral and derivative term gains"
E2Helper.Descriptions["setGainD(xsc:n)"] = "Updates state controller derivative term gain"
E2Helper.Descriptions["setGainI(xsc:n)"] = "Updates state controller integral term gain"
E2Helper.Descriptions["setGainID(xsc:nn)"] = "Updates state controller integral and derivative term gains"
E2Helper.Descriptions["setGainID(xsc:r)"] = "Updates state controller integral and derivative term gains"
E2Helper.Descriptions["setGainID(xsc:xv2)"] = "Updates state controller integral and derivative term gains"
E2Helper.Descriptions["setGainP(xsc:n)"] = "Updates state controller proportional term gain"
E2Helper.Descriptions["setGainPD(xsc:nn)"] = "Updates state controller proportional and derivative term gains"
E2Helper.Descriptions["setGainPD(xsc:r)"] = "Updates state controller proportional and derivative term gains"
E2Helper.Descriptions["setGainPD(xsc:xv2)"] = "Updates state controller proportional and derivative term gains"
E2Helper.Descriptions["setGainPI(xsc:nn)"] = "Updates state controller proportional and integral term gains"
E2Helper.Descriptions["setGainPI(xsc:r)"] = "Updates state controller proportional and integral term gains"
E2Helper.Descriptions["setGainPI(xsc:xv2)"] = "Updates state controller proportional and integral term gains"
E2Helper.Descriptions["setIsActive(xsc:n)"] = "Updates state controller activated working flag"
E2Helper.Descriptions["setIsCombined(xsc:n)"] = "Updates state controller combined flag spreading proportional term gain across others"
E2Helper.Descriptions["setIsDerivative(xsc:n)"] = "Updates state controller derivative enabled flag"
E2Helper.Descriptions["setIsIntegral(xsc:n)"] = "Updates state controller integral enabled flag"
E2Helper.Descriptions["setIsInverted(xsc:n)"] = "Updates state controller inverted feedback flag of the reference and set-point"
E2Helper.Descriptions["setIsManual(xsc:n)"] = "Updates state controller manual control signal flag"
E2Helper.Descriptions["setIsZeroCross(xsc:n)"] = "Updates state controller integral zero crossing flag"
E2Helper.Descriptions["setManual(xsc:n)"] = "Updates state controller manual control signal value"
E2Helper.Descriptions["setPower(xsc:nnn)"] = "Updates state controller proportional, integral and derivative term powers"
E2Helper.Descriptions["setPower(xsc:r)"] = "Updates state controller proportional, integral and derivative term powers"
E2Helper.Descriptions["setPower(xsc:v)"] = "Updates state controller proportional, integral and derivative term powers"
E2Helper.Descriptions["setPowerD(xsc:n)"] = "Updates state controller derivative term power"
E2Helper.Descriptions["setPowerI(xsc:n)"] = "Updates state controller integral term power"
E2Helper.Descriptions["setPowerID(xsc:nn)"] = "Updates state controller integral and derivative term powers"
E2Helper.Descriptions["setPowerID(xsc:r)"] = "Updates state controller integral and derivative term powers"
E2Helper.Descriptions["setPowerID(xsc:xv2)"] = "Updates state controller integral and derivative term powers"
E2Helper.Descriptions["setPowerP(xsc:n)"] = "Updates state controller proportional term power"
E2Helper.Descriptions["setPowerPD(xsc:nn)"] = "Updates state controller proportional and derivative term powers"
E2Helper.Descriptions["setPowerPD(xsc:r)"] = "Updates state controller proportional and derivative term powers"
E2Helper.Descriptions["setPowerPD(xsc:xv2)"] = "Updates state controller proportional and derivative term powers"
E2Helper.Descriptions["setPowerPI(xsc:nn)"] = "Updates state controller proportional and integral term powers"
E2Helper.Descriptions["setPowerPI(xsc:r)"] = "Updates state controller proportional and integral term powers"
E2Helper.Descriptions["setPowerPI(xsc:xv2)"] = "Updates state controller proportional and integral term powers"
E2Helper.Descriptions["setState(xsc:nn)"] = "Updates state controller automated internal parameters"
E2Helper.Descriptions["setTimeSample(xsc:n)"] = "Updates state controller static process time delta"
E2Helper.Descriptions["setWindup(xsc:nn)"] = "Updates state controller windup lower and upper bound"
E2Helper.Descriptions["setWindup(xsc:r)"] = "Updates state controller windup lower and upper bound"
E2Helper.Descriptions["setWindup(xsc:xv2)"] = "Updates state controller windup lower and upper bound"
E2Helper.Descriptions["setWindupMax(xsc:n)"] = "Updates state controller windup upper bound"
E2Helper.Descriptions["setWindupMin(xsc:n)"] = "Updates state controller windup lower bound"
E2Helper.Descriptions["tuneAutoTL(xsc:nn)"] = "Tunes state controller using the method (TL) Tyreus-Luyben auto oscillation"
E2Helper.Descriptions["tuneAutoZN(xsc:nn)"] = "Tunes state controller using the method (ZN) Ziegler-Nichols auto oscillation"
E2Helper.Descriptions["tuneAutoZN(xsc:nns)"] = "Tunes state controller using the method (ZN) Ziegler-Nichols auto oscillation extended by type: `classic`, `pessen`, `sovers`, `novers`"
E2Helper.Descriptions["tuneOverCHRLR(xsc:nnn)"] = "Tunes state controller using the method (CHR) Chien-Hrones-Reswick load rejection 20% overshot"
E2Helper.Descriptions["tuneOverCHRSP(xsc:nnn)"] = "Tunes state controller using the method (CHR) Chien-Hrones-Reswick set point track 20% overshot"
E2Helper.Descriptions["tuneProcAH(xsc:nnn)"] = "Tunes state controller using the method (AH) Astrom-Hagglund"
E2Helper.Descriptions["tuneProcCC(xsc:nnn)"] = "Tunes state controller using the method (CC) Choen-Coon"
E2Helper.Descriptions["tuneProcCHRLR(xsc:nnn)"] = "Tunes state controller using the method (CHR) Chien-Hrones-Reswick load rejection"
E2Helper.Descriptions["tuneProcCHRSP(xsc:nnn)"] = "Tunes state controller using the method (CHR) Chien-Hrones-Reswick set point track"
E2Helper.Descriptions["tuneProcIAE(xsc:nnn)"] = "Tunes state controller using the method (IAE) Integral absolute error"
E2Helper.Descriptions["tuneProcISE(xsc:nnn)"] = "Tunes state controller using the method (ISE) Integral square error"
E2Helper.Descriptions["tuneProcITAE(xsc:nnn)"] = "Tunes state controller using the method (ITAE) Integral of time-weighted absolute error"
E2Helper.Descriptions["tuneProcZN(xsc:nnnn)"] = "Tunes state controller using the method (ZNM) Ziegler-Nichols plant process"
